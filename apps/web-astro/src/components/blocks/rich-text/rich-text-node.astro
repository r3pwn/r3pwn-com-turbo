---
import Typography from "@/components/ui/typography.astro";
import {
  getTextClasses,
  HeadingVariants,
  TextFormatClasses,
  TextFormats,
  type ContainerContent,
} from "./common";
import { Debug } from "astro:components";
import ImageNode from "./image-node.astro";
import type { Media } from "@local/payload/types";
import BlockRenderer from "../block-renderer.astro";

interface ComponentProps {
  content: ContainerContent<any>;
}

export interface Props extends ComponentProps {}
const { content } = Astro.props;
---

{
  content.children?.map((item) => {
    const componentTag = (item as any).tag;

    switch (item.type) {
      case "block":
      case "inlineBlock":
        return <BlockRenderer content={item.fields as any} />;
      case "upload":
        return <ImageNode media={(item as ContainerContent<Media>).value} />;
      case "heading":
        return (
          <Typography
            as={componentTag}
            display={HeadingVariants[componentTag] || "body-lg"}
          >
            <Astro.self content={item as any} />
          </Typography>
        );
      case "horizontalrule":
        return <hr class="my-4" />;
      case "linebreak":
        return <br />;
      case "link":
      case "autolink":
        return (
          <a
            href={(item as any).fields?.url}
            target={(item as any).fields?.newTab ? "_blank" : undefined}
            class={TextFormatClasses.LINK}
          >
            <Astro.self content={item as any} />
          </a>
        );
      case "list":
        return (
          <Typography
            as={componentTag}
            display="list"
            class={componentTag === "ol" ? "list-decimal" : "list-disc"}
          >
            <Astro.self content={item as any} />
          </Typography>
        );
      case "listitem":
        return (
          <Typography as="li">
            <Astro.self content={item as any} />
          </Typography>
        );
      case "paragraph":
        return (
          <Typography as="p">
            <Astro.self content={item as any} />
          </Typography>
        );
      case "quote":
        let display = "quote";
        if (
          (item.children as any[]).every(
            (textNode) =>
              textNode.type === "linebreak" ||
              textNode.type === "autolink" ||
              (textNode.format as number) & TextFormats.CODE
          )
        ) {
          display = "code-block";
        }

        return (
          <Typography display={display} as="div" class="empty:opacity-0">
            <Astro.self content={item as any} />
          </Typography>
        );
      case "text":
        return (
          <Typography class={getTextClasses(item.format as unknown as number)}>
            {(item as any).text}
          </Typography>
        );
      default:
        console.warn(`Unknown content type ${item.type}`);
    }
    return <Debug {item} />;
  })
}
{
  !content.children && (
    <Typography class={getTextClasses(content.format as unknown as number)}>
      {(content as any).text}
    </Typography>
  )
}
